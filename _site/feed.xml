<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2024-08-10T23:22:54+02:00</updated><id>/feed.xml</id><title type="html">Code Artisan Journey</title><author><name>Thomas Klijnman</name><email>thomas@klijnman.nl</email></author><entry><title type="html">Optimizing for security: Graph API Access Control</title><link href="/graphapi/optimizing-for-security-graph-api-access-control/" rel="alternate" type="text/html" title="Optimizing for security: Graph API Access Control" /><published>2024-02-04T19:36:19+01:00</published><updated>2024-02-04T19:36:19+01:00</updated><id>/graphapi/optimizing-for-security-graph-api-access-control</id><content type="html" xml:base="/graphapi/optimizing-for-security-graph-api-access-control/"><![CDATA[<h3 id="why-should-restrictions-be-imposed-on-graphapi-access">Why should restrictions be imposed on GraphAPI access?</h3>

<p>Granting permissions to Entra ID App registrations for access via the Graph API to Azure tenants can provide significant benefits, particularly in service automation scenarios.</p>

<p>However, managing unrestricted access to these registrations can be inconvenient and a known risk. It’s crucial to establish conditional restrictions to ensure controlled access to your Azure Tenant via the Graph API.</p>

<p>Enter… the Conditional Access for workload identities!</p>

<p>First, what are workload identities:<br />
As Microsoft describes it, <em>“A workload identity is an identity you assign to a software workload (such as an application, service, script, or container) to authenticate and access other services and resources.”</em></p>

<p>Microsoft now also offers ‘Entra Workload ID Premium’ to use workload identities within Conditional Access. These workload identities serve as the gateway, granting applications or service principals access to resources like the Graph API.</p>

<p>So, in this post, we connect to the Graph API as a workload identity via an IP restriction enforced by a Conditional Access policy.</p>

<details class="wp-block-details has-vivid-red-color has-text-color has-link-color wp-elements-44103e58f4665527c37b842beb47c688 is-layout-flow wp-block-details-is-layout-flow" style="font-size:18px"><summary>Disclaimer</summary>

The instructions below assume that you have a Microsoft Entra Workload-ID license, which enables you to create Conditional Access policies based on workload identities, such as a service principal.

</details>

<h3 id="creating-the-named-location">Creating the named location</h3>

<p>The journey begins with creating a named location, the first step in defining the IPs we want to exclude from our conditional access policy.</p>

<p>To start this, navigate to the Conditional Access management blade. (<a href="https://enca.cmd.ms/">The quick way</a>, thanks to Merill Fernando from <a href="http://merill.net">merill.net</a>) and select named locations, as shown in the example below.</p>

<p><img src="https://raw.githubusercontent.com/ThomasKlijnman/thomasklijnman.github.io/main/_images/2023/12/CA-Blade-Highlight-Example.png?resize=640%2C509&amp;ssl=1" alt="Conditional Access Blade" /></p>

<p>In the Named locations blade, I then create a new location as shown below.</p>

<p><img src="https://raw.githubusercontent.com/ThomasKlijnman/thomasklijnman.github.io/main/_images/2023/12/CA-Blade-NewNamedLocation.png?resize=386%2C399&amp;ssl=1" alt="New Named Location" /></p>

<h3 id="assigning-the-named-location-to-a-conditional-access-policy">Assigning the named location to a conditional access policy</h3>

<p>To make the named location a requirement in the conditional access policy, we have to assign it to a new or existing conditional access policy.</p>

<p>For the purpose of this post, we are creating a new policy by navigating to the Conditional Access blade and selecting the workload identity we wish to control via Conditional Access.</p>

<p><img src="https://raw.githubusercontent.com/ThomasKlijnman/thomasklijnman.github.io/main/_images/2023/12/CA-Blade-NewWorkloadID.png?resize=606%2C869&amp;ssl=1" alt="New Workload ID" /></p>

<p>After selecting the workload identity to which we want to apply the restrictions, we give the policy a name and select the earlier created named location as an exclusion, so that only that location is allowed to bypass the policy.</p>

<p>In the access controls, we select ‘Block access’ so that every other location other than the selected named location is blocked from access to the workload identity.</p>

<p><img src="https://raw.githubusercontent.com/ThomasKlijnman/thomasklijnman.github.io/main/_images/2023/12/CA-Blade-NewWorkloadID-NamedLocation.png?resize=640%2C549&amp;ssl=1" alt="Named Location in Workload ID" /></p>

<h3 id="how-does-this-work-in-practice">How does this work in practice?</h3>

<p>As published in <a href="https://codeartisanjourney.com/graphapi/a-simplified-guide-connecting-to-microsoft-graph-api-with-powershell/">my earlier blog post</a> to easily generate a Graph API access token, we are re-using some code.</p>

<p>When we request an access token via the trusted named location, we get the following result:</p>

<p><img src="https://raw.githubusercontent.com/ThomasKlijnman/thomasklijnman.github.io/main/_images/2024/01/CA-Run-ExampleWithOutRestriction-1024x491.png?resize=640%2C307" alt="Example Without Restriction" /></p>

<p>And then when we request an access token outside of our trusted named location, we get the next result back:</p>

<p><img src="https://raw.githubusercontent.com/ThomasKlijnman/thomasklijnman.github.io/main/_images/2024/01/CA-Run-ExampleWithRestriction-1024x406.png?resize=640%2C254" alt="Example With Restriction" /></p>

<h3 id="conclusion">Conclusion</h3>

<p>When creating workload identities to use in, for example, service automation products, we also need to pay attention to the access controls for these identities. This aspect can be overlooked, leading to unnecessary risk.</p>

<p>Unfortunately, this feature is not standard and requires additional licenses to configure.</p>

<p>In an upcoming post, I’ll delve into how to best maintain minimal permissions when creating a workload identity for use in automation products (scripts, etc.), as most workload identities typically do not need any more permissions than necessary.</p>]]></content><author><name>Thomas</name></author><category term="GraphAPI" /><category term="API" /><category term="ConditionalAccess" /><category term="Powershell" /><summary type="html"><![CDATA[Why should restrictions be imposed on GraphAPI access?]]></summary></entry><entry><title type="html">A simplified guide: Connecting to the Graph API with PowerShell</title><link href="/graphapi/a-simplified-guide-connecting-to-microsoft-graph-api-with-powershell/" rel="alternate" type="text/html" title="A simplified guide: Connecting to the Graph API with PowerShell" /><published>2024-01-01T16:15:03+01:00</published><updated>2024-01-01T16:15:03+01:00</updated><id>/graphapi/a-simplified-guide-connecting-to-microsoft-graph-api-with-powershell</id><content type="html" xml:base="/graphapi/a-simplified-guide-connecting-to-microsoft-graph-api-with-powershell/"><![CDATA[<p>In one of my recent side quests, I delved into the realm of the Microsoft API services, exploring ways to efficiently retrieve specific information from those services using the Microsoft Graph API. Traditionally, that process for me involved navigating through one or more individual Powershell modules with predefined cmdlets.</p>

<p>However, I discovered a more direct route; leveraging HTTPs calls for querying data.</p>

<p>By opting for HTTPs calls over Powershell modules you can simplify the method for making and posting requests and even throw out your module dependency.</p>

<p>In this blog post I aimed to optimize the approach you need to make for connecting to the Microsoft Graph API and simplify the data retrieval process, one of the possible connection methods to this approach lies involves obtaining an expiring access token through an Entra ID App registration with a client secret.</p>

<p>In an upcoming blog post, I will even delve deeper into the ways of restricting authentication to Microsoft Graph API services using this access token method.</p>

<h2 id="simplifying-the-connection">Simplifying the connection</h2>

<p>Connecting to one of the Microsoft online services via the underlying API can sometimes be a sequence of multiple tasks, especially when dealing with multiple Powershell modules. However, by utilizing HTTPs calls, the process becomes more straightforward and consolidated.</p>

<p>The simplicity of this method allows for a seamless interaction with the array of API services offered by Microsoft without the need for multiple Powershell modules.</p>

<h2 id="access-token-magic">Access Token Magic</h2>

<details class="wp-block-details has-vivid-red-color has-text-color has-link-color has-small-font-size wp-elements-d122976472ec6003c19f8ad69b44c955 is-layout-flow wp-block-details-is-layout-flow"><summary>Disclaimer</summary>This section assumes that you are already familiar with and have set up an Entra ID App registration, along with the addition of API permissions and a client secret.

</details>

<p>Let’s dive straight into the scripting part. I’ve created a few simple functions in PowerShell that send and retrieve an access token.</p>

<p>See the below scripts that I’ve used for this example:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Build the authorization header
$tokenUrl = "https://login.microsoftonline.com/&lt;em&gt;&lt;strong&gt;&lt; Tenant ID&lt;/strong&gt; &gt;&lt;/em&gt;/oauth2/token"
$body = @{
    'resource' = 'https://graph.microsoft.com'
    'client_id' = &lt;strong&gt;&lt;em&gt;&lt; App registration ID &gt;&lt;/em&gt;&lt;/strong&gt;
    'client_secret' = &lt;strong&gt;&lt;em&gt;&lt; App registration client secret &gt;&lt;/em&gt;&lt;/strong&gt;
    'grant_type' = 'client_credentials'
}

# Obtain the access token
$tokenResponse = Invoke-RestMethod -Method Post -Uri $tokenUrl -ContentType "application/x-www-form-urlencoded" -Body $body
$accessToken = $tokenResponse.access_token
</code></pre></div></div>

<p>In simple terms, the above code requests an access token from login.microsoftonline.com, which later can be used in the below function where I use that earlier generated access token to make an HTTPs call to the Graph API.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Function to invoke the Graph API
function Invoke-GraphApi {
    param (
        [string]$ApiEndpoint,
        [string]$Method = 'GET',
        [string]$Body = $null,
        [string]$Version = 'v1.0'
        [string]$ContentType = 'application/json'
    )

    # Set the base URL for the Graph API
    $baseUrl = "https://graph.microsoft.com/$Version"

    # Authorize with the dynamically obtained access token
    $authorization = @{
        'Authorization' = "Bearer $accessToken"
        'Content-Type' = 'application/json'
    }

    # Build the full URL
    $url = "$baseUrl$ApiEndpoint"

    # Execute the HTTP call based on the specified method
    $response = Invoke-RestMethod -Uri $url -Headers $authorization -Method $Method -Body $Body -ContentType $ContentType

    # Return the response
    $response
}

</code></pre></div></div>

<details class="wp-block-details has-small-font-size is-layout-flow wp-block-details-is-layout-flow"><summary>Technical note</summary>Due to limitations in the underlying method used in the .NET Framework by the Invoke-RestMethod, the body parameter can only be used when the HTTP method is not GET. That’s why this script works in Powershell 7. But can be modified to be used in Powershell 5.1.

</details>

<p>Using both the authorization and function together gives the possibility to make a variety of requests, ranging from simple GET requests to more complex POST and PATCH requests, this along with incorporating parameters in the request body, it enables a simple approach to handling diverse types of requests with ease using the same method.</p>

<p>Well.. How easy can this be?</p>

<p><img src="https://raw.githubusercontent.com/ThomasKlijnman/thomasklijnman.github.io/main/_images/2023/12/AccessTokenExample.png?resize=640%2C259" alt="" /></p>

<p>In the below example I then use that same access token to retrieve all groups in my lab tenant with the below code.</p>

<p><img src="https://raw.githubusercontent.com/ThomasKlijnman/thomasklijnman.github.io/main/_images/2023/12/FunctionRunExample.png?resize=640%2C467" alt="" /></p>

<h2 id="moving-beyond-powershell-modules">Moving Beyond PowerShell Modules</h2>

<p>While Powershell modules are good tools, breaking away from their dependency has allowed me to explore more of the Microsoft Graph API possibilities. This shift from Powershell modules has also expanded my personal perspective and allows me to get more potential out of the Microsoft API services without relying solely on predefined modules and cmdlets.</p>

<p>More in depth Graph API posts will be posted soon.</p>]]></content><author><name>Thomas</name></author><category term="GraphAPI" /><category term="API" /><category term="Microsoft365" /><category term="Powershell" /><summary type="html"><![CDATA[In one of my recent side quests, I delved into the realm of the Microsoft Online API services, exploring ways to efficiently specific information from those services using the Microsoft Graph API.]]></summary></entry><entry><title type="html">About me</title><link href="/about/about-me/" rel="alternate" type="text/html" title="About me" /><published>2023-12-26T15:49:42+01:00</published><updated>2023-12-26T15:49:42+01:00</updated><id>/about/about-me</id><content type="html" xml:base="/about/about-me/"><![CDATA[<p>Meet me, Thomas Klijnman, a 26-year-old Flevoland native.</p>

<p>For the past four years,I’ve been part of the Pink Elephant family, currently rocking it as a System Engineer for office automation.</p>

<p>My focus revolves around the Pink Workplace, where I dive into different focus areas, such as identity management using Tools4Ever’s HelloID, configure the workplace with Liquit Workspace and the PSADT toolkit, and navigating the landscape of Microsoft Azure.</p>

<p>One of my current focus areas is navigating the vast landscape of the Microsoft Graph API. It’s here that I get to explore and implement new solutions to use in service automation setups and contributing to the technological backbone of Pink Ka.</p>

<p>Join me on this blog as I share insights, experiences, and challenges that come with current IT landscapes.</p>]]></content><author><name>Thomas</name></author><category term="About" /><summary type="html"><![CDATA[Meet me, Thomas Klijnman, a 26-year-old Flevoland native.]]></summary></entry></feed>